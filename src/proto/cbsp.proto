syntax = "proto3";

package cbsp;

message Empty {}

message ParameterBytes {
  bytes tensor = 1;
	repeated int32 shape = 2;
}
message PytorchParameters {
	repeated ParameterBytes parameters = 1;
	string dtype = 2;
}

message Constant { 
  oneof constant {
    double double = 1;
    sint64 sint64 = 2;
    bool bool = 3;
    string string = 4;
    bytes bytes = 5;
  }
}

message ClientMessage {
  enum MESSAGE_TYPE {
    GET_PARAMETERS = 0;
    GET_CONFIG = 1;
    SEND_PARAMETERS = 2;
    SEND_RESULTS = 3;
  }
  message GetParameters {
    MESSAGE_TYPE type = 1;
    map <string, Constant> info = 2;
  }
  message GetConfig {
    MESSAGE_TYPE type = 1;
    map <string, Constant> info = 2;
  }
  message SendParameters {
    MESSAGE_TYPE type = 1;
    map <string, Constant> info = 2;
    PytorchParameters parameters = 3;
  }
  message SendResults {
    MESSAGE_TYPE type = 1;
    map <string, Constant> info = 2;
    map <string, Constant> results = 3;
  }

  oneof client_message{
    GetParameters get_parameters = 1;
    GetConfig get_config = 2;
    SendParameters send_parameters = 3;
    SendResults send_results = 4;
  }
}

message ServerMessage {
  enum MESSAGE_TYPE {
    SEND_PARAMETERS = 0;
    SEND_CONFIG = 1;
    NORMAL_RESPONSE = 2;
  }
  message SendParameters {
    MESSAGE_TYPE type = 1;
    map <string, Constant> info = 2;
    PytorchParameters parameters = 3;
  }
  message SendConfig {
    MESSAGE_TYPE type = 1;
    map <string, Constant> info = 2;
  }
  message NormalResponse {
    MESSAGE_TYPE type = 1;
    map <string, Constant> info = 2;
    string response = 3;
  }

  oneof server_message {
    SendParameters get_parameters = 1; // TODO: Rename this as send_parameters, leading to a lot of chain changes ðŸ˜“
    SendConfig send_config = 2;
    NormalResponse normal_response = 3;
    string test_response = 4; // TODO: Do something(remove) with this redundant line, no functionality to handle this has been written yet
  }
}

service CommunicationService { //DictionaryService
  rpc BidirectionalStream(ClientMessage) returns (ServerMessage); //rpc TransmitDictionary(PytorchParameters) returns (Response);
}

